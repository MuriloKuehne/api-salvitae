generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  secretary
}

enum ConsultationType {
  first
  followUp
}



model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(secretary)

  patients  Patient[] @relation("DoctorPatients")
  consultations Consultation[] @relation("DoctorConsultations")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Patient {
  id          String         @id @default(uuid())
  nome        String
  cpf         String         @unique
  birthDate   String       @map("birth_date")
  sexo        String
  telefone        String
  altura        String
  peso        String
  etnia        String
  cidade        String
  bairro        String
  rua        String
  num        String  
  profissao        String 
  estadoCivil        String @map("estado_civil")

  adminId    String?
  admin      User?          @relation("DoctorPatients", fields: [adminId], references: [id])
  
  consultations Consultation[]

  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("patients")
}

model Consultation {
  id            String           @id @default(uuid())
  patientId     String           @map("patient_id")
  adminId      String           @map("admin_id")
  type          ConsultationType  @default(first)

  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  patient       Patient          @relation(fields: [patientId], references: [id])
  admin        User             @relation("DoctorConsultations", fields: [adminId], references: [id])

  anamnese      Anamnese?
  hpp           HPP?
  exames        Exames?

  @@map("consultations")
}

model Anamnese {
  id             String       @id @default(uuid())
  consultationId String       @unique @map("consultation_id")
  HMA        String
  Exf        String
  Temp        String
  AGI        String
  Cd         String
  FC         String
  ACV         String
  PA         String
  Outros         String

  consultation   Consultation @relation(fields: [consultationId], references: [id])

  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("anamnese")
}

model HPP {
  id             String       @id @default(uuid())
  consultationId String       @unique @map("consultation_id")
  PatoPrev        String @map("patologias-previas")
  Medicacao        String
  Alergia        String
  Cirurgia        String
  Tratamento        String
  HistFam        String @map("historico-familiar")

  consultation   Consultation @relation(fields: [consultationId], references: [id])

  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("hpp")
}


model Exames {
  id             String       @id @default(uuid())
  consultationId String       @unique @map("consultation_id")
  data        String @map("data_hora") //O objetivo Ã© ser manual mesmo
  Er        String @map("Er(mi/mm3)")
  Hg        String @map("Hg(g%)")
  Ht        String @map("Ht(%)")
  Leu        String @map("Leu(/mm3)")
  Plq        String @map("Plq(/mm3)")
  PA         String @map("PA(mmHg)")
  Obs        String 

  consultation   Consultation @relation(fields: [consultationId], references: [id])

  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("exames")
}
