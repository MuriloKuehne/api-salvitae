generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  doctor
  secretary
}

enum AppointmentType {
  first
  followUp
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(secretary)

  patients  Patient[] @relation("DoctorPatients")
  consultations Consultation[] @relation("DoctorConsultations")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Patient {
  id          String         @id @default(uuid())
  name        String
  cpf         String         @unique
  birthDate   String       @map("birth_date")

  doctorId    String?
  doctor      User?          @relation("DoctorPatients", fields: [doctorId], references: [id])
  
  consultations Consultation[]

  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("patients")
}

model Consultation {
  id            String           @id @default(uuid())
  patientId     String           @map("patient_id")
  doctorId      String           @map("doctor_id")
  type          AppointmentType  @default(first)

  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  patient       Patient          @relation(fields: [patientId], references: [id])
  doctor        User             @relation("DoctorConsultations", fields: [doctorId], references: [id])

  anamnese      Anamnese?
  hpp           HPP?
  dados         Dados?
  exames        Exames?

  @@map("consultations")
}

model Anamnese {
  id             String       @id @default(uuid())
  consultationId String       @unique @map("consultation_id")
  content        String

  consultation   Consultation @relation(fields: [consultationId], references: [id])

  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("anamnese")
}

model HPP {
  id             String       @id @default(uuid())
  consultationId String       @unique @map("consultation_id")
  content        String

  consultation   Consultation @relation(fields: [consultationId], references: [id])

  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("hpp")
}

model Dados {
  id             String       @id @default(uuid())
  consultationId String       @unique @map("consultation_id")
  content        String

  consultation   Consultation @relation(fields: [consultationId], references: [id])

  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("dados")
}

model Exames {
  id             String       @id @default(uuid())
  consultationId String       @unique @map("consultation_id")
  content        String

  consultation   Consultation @relation(fields: [consultationId], references: [id])

  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("exames")
}
